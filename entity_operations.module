<?php
/**
 * @file entity_operations.module
 * Contains core hooks for the Entity Operations module.
 */

/**
 * Get the content for an entity's operation.
 *
 * This allows, for instance, a particular operation form to be embedded in
 * another context.
 *
 * @param $entity_type
 *  The entity type.
 * @param $entity
 *  The entity to return the operation for.
 * @param $operation
 *  The name of the operation. This should be the key of an item in the entity
 *  type's operation array.
 */
function entity_operations_get_operation($entity_type, $entity, $operation) {
  $entity_info = entity_get_info($entity_type);

  if (isset($entity_info['operations ui']['operations'][$operation])) {
    $operation_class = $entity_info['operations ui']['operations'][$operation]['handler'];

    $operation_handler = new $operation_class($entity_type);
    if ($operation_handler->is_form()) {
      return drupal_get_form('entity_operations_operation_form', $entity_type, $operation_class, $entity);
    }
    else {
      return $operation_handler->page();
    }
  }
}

/**
 * Implements hook_menu().
 */
function entity_operations_menu() {
  $items = array();
  foreach (entity_get_info() as $entity_type => $info) {
    if (isset($info['operations ui'])) {
      $class = isset($info['operations ui']['controller class']) ? $info['operations ui']['controller class'] : 'EntityOperationsDefaultUIController';
      $controller = new $class($entity_type, $info);
      $items += $controller->hook_menu();
    }
  }

  return $items;
}

/**
 * Generic page callback. Hands over to the handler's page() method.
 *
 * @param $entity_type
 *  The entity type.
 * @param $handler_class
 *  The name of the handler class for the current operation.
 * @param $entity
 *  The entity.
 *
 * @return
 *  Either output text or a render array.
 */
function entity_operations_operation_page_callback($entity_type, $handler_class, $entity) {
  $operation_handler = new $handler_class($entity_type);

  return $operation_handler->page($entity_type, $entity);
}

/**
 * Operation form callback. Hands over to the handler's form() method.
 */
function entity_operations_operation_form($form, &$form_state, $entity_type, $handler_class, $entity) {
  $operation_handler = new $handler_class($entity_type);

  return $operation_handler->form($form, $form_state, $entity_type, $entity);
}

/**
 * Operation form validate callback. Hands over to the handler's formValidate().
 */
function entity_operations_operation_form_validate($form, &$form_state) {
  list($entity_type, $handler_class, $entity) = $form_state['build_info']['args'];

  $operation_handler = new $handler_class($entity_type);

  $operation_handler->formValidate($form, $form_state, $entity_type, $entity);
}

/**
 * Operation form submit callback. Hands over to the handler's formSubmit().
 */
function entity_operations_operation_form_submit($form, &$form_state) {
  list($entity_type, $handler_class, $entity) = $form_state['build_info']['args'];

  $operation_handler = new $handler_class($entity_type);

  $operation_handler->formSubmit($form, $form_state, $entity_type, $entity);
}

/**
 * Menu access callback. Hands over to the handler's acess().
 */
function entity_operations_operation_access_callback($entity_type, $handler_class, $entity) {
  $operation_handler = new $handler_class($entity_type);

  return $operation_handler->access($entity_type, $entity);
}
