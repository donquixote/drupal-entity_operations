<?php

/**
 * @file entity_operations_test.module
 * Provides a test entity type for testing operations.
 */

/**
 * Implements hook_entity_operation_info().
 */
function entity_operations_test_entity_operation_info() {
  $info = array(
    'entity_operations_test' => array(
      'view' => array(
        'handler' => 'EntityOperationsOperationEntityView',
        'provision' => array(
          'menu' => array(
            'default' => TRUE,
            'menu item' => array(
              'title' => 'Main',
            ),
          ),
          'views field' => TRUE,
        ),
      ),
      'edit' => array(
        'handler' => 'EntityOperationsOperationEdit',
        'provision' => array(
          'menu' => TRUE,
          'views field' => TRUE,
        ),
      ),
      'add' => array(
        'handler' => 'EntityOperationsOperationAdd',
        'provision' => array(
          'menu' => TRUE,
        ),
      ),
      'delete' => array(
        'handler' => 'EntityOperationsOperationDelete',
        'provision' => array(
          'menu' => TRUE,
          'views field' => TRUE,
        ),
      ),
      'red' => array(
        'handler' => 'EntityOperationsTestOperationTitleRed',
        'provision' => array(
          'menu' => TRUE,
        ),
      ),
      'blue' => array(
        'handler' => 'EntityOperationsTestOperationTitleBlue',
        'provision' => array(
          'menu' => TRUE,
        ),
      ),
      'green' => array(
        'handler' => 'EntityOperationsTestOperationTitleGreen',
        'provision' => array(
          'menu' => TRUE,
        ),
      ),
    ),
  );
  return $info;
}

/**
 * Implements hook_entity_info().
 */
function entity_operations_test_entity_info() {
  $return = array(
    'entity_operations_test' => array(
      'label' => t('Test Entity'),
      'plural label' => t('Test Entities'),
      'description' => t('An entity type used by the Entity Operations tests.'),
      'entity class' => 'EntityOperationsTestEntity',
      'controller class' => 'EntityAPIController',
      'base table' => 'entity_operations_test',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'eid',
        'bundle' => 'type',
        'label' => 'title',
      ),
      'label callback' => 'callback_entity_info_label',
      'uri callback' => 'entity_operations_entity_uri',
      'operations ui' => array(
        'path' => 'entity_operations_test',
      ),
      'access callback' => 'entity_operations_test_access',
      'bundles' => array(
        // Provide two bundles so we can test bundle-related things.
        'alpha' => array(
          'label' => t('Alpha'),
        ),
        'beta' => array(
          'label' => t('Beta'),
        ),
      ),
      'module' => 'entity_operations_test',
      // Admin UI for our 'add' and 'edit' operations.
      // TODO: check if actually needed!
      'admin ui' => array(
        'file' => 'entity_operations_test.admin.inc',
        // We don't use this but it's needed for EntityOperationsOperationAdd.
        'path' => 'admin/structure/entity_operations_test',
      ),
    ),
  );

  return $return;
}

/**
 * Implements callback_entity_info_label().
 */
function callback_entity_info_label($entity, $entity_type) {
  return empty($entity->title) ? 'Untitled entity' : $entity->title;
}

/**
 * Entity API access callback.
 */
function entity_operations_test_access($op, $entity, $account, $entity_type) {
  // TODO!
  return TRUE;
}

/**
 * Entity class.
 */
class EntityOperationsTestEntity extends Entity {

  /**
   * Builds a structured array representing the entity's content.
   *
   * Additionally, draft bundles may specify a controller class to perform
   * building of content before the normal entity controller does.
   *
   * @see entity_build_content()
   */
  public function buildContent($view_mode = 'full', $langcode = NULL) {
    $content = array();

    // Show the operations only on the 'full' view mode.
    if ($view_mode == 'full') {
      /*
      // fieldset version.
      $content['operations'] = entity_operations_get_entity_operations_fieldset($this);
      */
      // TODO: use the provision here!
      $content['operations'] = drupal_get_form('entity_operations_multiple_operation_form', $this->entityType, $this, array('red', 'blue', 'green'));

      $content['operations']['#weight'] = 20;
    }

    // Can't call the parent method, as that doesn't have the $content parameter
    // so we have to just mimic what it does.
    return entity_get_controller($this->entityType)->buildContent($this, $view_mode, $langcode, $content);
  }

}

/**
 * Test op handler: sets the entity title to 'Red'.
 */
class EntityOperationsTestOperationTitleRed extends EntityOperationsOperationAction {

  public $access_verb = 'edit';

  /**
   * Returns basic information about the operation.
   */
  function operationInfo() {
    return array(
      'label' => 'Make red',
      'description' => 'Sets the title.',
    ) + parent::operationInfo();
  }

  /**
   * Returns strings for the operations.
   *
   * @return
   *  An array containing the following keys:
   *  - 'form': An array of strings for the operation form, containing:
   *    - 'button label'
   *    - 'confirm question'
   *    - 'submit message'
   */
  function operationStrings() {
    return array(
      'tab title' => 'Red',
      'page title' => "Set title to 'Red'",
      'button label' => t('Make it red'),
      'confirm question' => t('Are you sure you want to set the @entity-type %label to red?'),
      'submit message' => t('The @entity-type %label has been made red.'),
    );
  }

  /**
   * The red action.
   */
  function execute($entity_type, $entity, $parameters = array()) {
    $entity->title = 'Red';
    $entity->save();
  }

}

/**
 * Test op handler: sets the entity title to 'Blue'.
 */
class EntityOperationsTestOperationTitleBlue extends EntityOperationsOperationAction {

  public $access_verb = 'edit';

  /**
   * Returns basic information about the operation.
   */
  function operationInfo() {
    return array(
      'label' => 'Make blue',
      'description' => 'Sets the title.',
    ) + parent::operationInfo();
  }

  /**
   * Returns strings for the operations.
   *
   * @return
   *  An array containing the following keys:
   *  - 'form': An array of strings for the operation form, containing:
   *    - 'button label'
   *    - 'confirm question'
   *    - 'submit message'
   */
  function operationStrings() {
    return array(
      'tab title' => 'Blue',
      'page title' => "Set title to 'Blue'",
      'button label' => t('Make it blue'),
      'confirm question' => t('Are you sure you want to set the @entity-type %label to blue?'),
      'submit message' => t('The @entity-type %label has been made blue.'),
    );
  }

  /**
   * The blue action.
   */
  function execute($entity_type, $entity, $parameters = array()) {
    $entity->title = 'Blue';
    $entity->save();
  }

}

/**
 * Test op handler: sets the entity title to 'Green'.
 */
class EntityOperationsTestOperationTitleGreen extends EntityOperationsOperationAction {

  public $access_verb = 'edit';

  /**
   * Returns basic information about the operation.
   */
  function operationInfo() {
    return array(
      'label' => 'Make Green',
      'description' => 'Sets the title.',
    ) + parent::operationInfo();
  }

  /**
   * Returns strings for the operations.
   *
   * @return
   *  An array containing the following keys:
   *  - 'form': An array of strings for the operation form, containing:
   *    - 'button label'
   *    - 'confirm question'
   *    - 'submit message'
   */
  function operationStrings() {
    return array(
      'tab title' => 'Green',
      'page title' => "Set title to 'Green'",
      'button label' => t('Make it Green'),
      'confirm question' => t('Are you sure you want to set the @entity-type %label to Green?'),
      'submit message' => t('The @entity-type %label has been made Green.'),
    );
  }

  /**
   * The green action.
   */
  function execute($entity_type, $entity, $parameters = array()) {
    $entity->title = 'Green';
    $entity->save();
  }

}
